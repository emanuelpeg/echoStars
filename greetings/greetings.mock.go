// Code generated by MockGen. DO NOT EDIT.
// Source: C:\projects\goLang\echoStars\greetings\greetings.go
//
// Generated by this command:
//
//	mockgen.exe -source=C:\projects\goLang\echoStars\greetings\greetings.go -destination=C:\projects\goLang\echoStars\greetings\greetings.mock.go
//
// Package mock_greetings is a generated GoMock package.
package greetings

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGreeter is a mock of Greeter interface.
type MockGreeter struct {
	ctrl     *gomock.Controller
	recorder *MockGreeterMockRecorder
}

// MockGreeterMockRecorder is the mock recorder for MockGreeter.
type MockGreeterMockRecorder struct {
	mock *MockGreeter
}

// NewMockGreeter creates a new mock instance.
func NewMockGreeter(ctrl *gomock.Controller) *MockGreeter {
	mock := &MockGreeter{ctrl: ctrl}
	mock.recorder = &MockGreeterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGreeter) EXPECT() *MockGreeterMockRecorder {
	return m.recorder
}

// Hello mocks base method.
func (m *MockGreeter) Hello(name string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hello", name)
	ret0, _ := ret[0].(string)
	return ret0
}

// Hello indicates an expected call of Hello.
func (mr *MockGreeterMockRecorder) Hello(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hello", reflect.TypeOf((*MockGreeter)(nil).Hello), name)
}
