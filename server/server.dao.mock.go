// Code generated by MockGen. DO NOT EDIT.
// Source: server/server.dao.go
//
// Generated by this command:
//
//	mockgen.exe -source=server/server.dao.go -destination=server/server.dao.mock.go -package=server
//
// Package server is a generated GoMock package.
package server

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockServerDao is a mock of ServerDao interface.
type MockServerDao struct {
	ctrl     *gomock.Controller
	recorder *MockServerDaoMockRecorder
}

// MockServerDaoMockRecorder is the mock recorder for MockServerDao.
type MockServerDaoMockRecorder struct {
	mock *MockServerDao
}

// NewMockServerDao creates a new mock instance.
func NewMockServerDao(ctrl *gomock.Controller) *MockServerDao {
	mock := &MockServerDao{ctrl: ctrl}
	mock.recorder = &MockServerDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServerDao) EXPECT() *MockServerDaoMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockServerDao) Delete(url *string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", url)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockServerDaoMockRecorder) Delete(url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServerDao)(nil).Delete), url)
}

// GetAll mocks base method.
func (m *MockServerDao) GetAll() ([]*Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockServerDaoMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockServerDao)(nil).GetAll))
}

// Upsert mocks base method.
func (m *MockServerDao) Upsert(server *Server) (*Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upsert", server)
	ret0, _ := ret[0].(*Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Upsert indicates an expected call of Upsert.
func (mr *MockServerDaoMockRecorder) Upsert(server any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upsert", reflect.TypeOf((*MockServerDao)(nil).Upsert), server)
}
