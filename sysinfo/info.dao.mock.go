// Code generated by MockGen. DO NOT EDIT.
// Source: C:\projects\goLang\echoStars\sysinfo\info.dao.go
//
// Generated by this command:
//
//	mockgen.exe -source=C:\projects\goLang\echoStars\sysinfo\info.dao.go -destination=C:\projects\goLang\echoStars\sysinfo\info.dao.mock.go
//
// Package mock_sysinfo is a generated GoMock package.
package sysinfo

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockInfoDao is a mock of InfoDao interface.
type MockInfoDao struct {
	ctrl     *gomock.Controller
	recorder *MockInfoDaoMockRecorder
}

// MockInfoDaoMockRecorder is the mock recorder for MockInfoDao.
type MockInfoDaoMockRecorder struct {
	mock *MockInfoDao
}

// NewMockInfoDao creates a new mock instance.
func NewMockInfoDao(ctrl *gomock.Controller) *MockInfoDao {
	mock := &MockInfoDao{ctrl: ctrl}
	mock.recorder = &MockInfoDaoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInfoDao) EXPECT() *MockInfoDaoMockRecorder {
	return m.recorder
}

// CheckDb mocks base method.
func (m *MockInfoDao) CheckDb() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDb")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckDb indicates an expected call of CheckDb.
func (mr *MockInfoDaoMockRecorder) CheckDb() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDb", reflect.TypeOf((*MockInfoDao)(nil).CheckDb))
}

// GetInfo mocks base method.
func (m *MockInfoDao) GetInfo() (*SysInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInfo")
	ret0, _ := ret[0].(*SysInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInfo indicates an expected call of GetInfo.
func (mr *MockInfoDaoMockRecorder) GetInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInfo", reflect.TypeOf((*MockInfoDao)(nil).GetInfo))
}

// SaveInfo mocks base method.
func (m *MockInfoDao) SaveInfo(info *SysInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveInfo", info)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveInfo indicates an expected call of SaveInfo.
func (mr *MockInfoDaoMockRecorder) SaveInfo(info any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveInfo", reflect.TypeOf((*MockInfoDao)(nil).SaveInfo), info)
}
